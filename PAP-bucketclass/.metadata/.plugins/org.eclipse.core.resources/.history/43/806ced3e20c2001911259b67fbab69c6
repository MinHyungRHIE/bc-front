package com.pap.bucketclass.entity;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.management.relation.Role;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.validator.constraints.Email;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

@Entity
@Table(name = "member", uniqueConstraints = {@UniqueConstraint(columnNames = {"member_email", "member_nickname"})})
public class Member implements UserDetails, Serializable{
	
	@Id
	@Column(name = "member_id", updatable = false, nullable = false)
	private String memberId;
	
	@Column(name = "member_password")
	private String memberPassword;
	
	@Email
	@Column(name = "member_email", unique = true)
	private String memberEmail;
	
	@Column(name = "member_nickname", unique = true)
	private String memberNickname;
	
	@Column(name = "member_join_date")
	private Date memberJoinDate;
	
	@Column(name = "member_img")
	private String memberImg;
	
	@Column(name = "member_isActive")
	private boolean memberIsActive;
	
	@Column(name = "career", nullable = true)
	private String career;
	
	@Column(name = "certi")
	private String certi;
	
	@Column(name = "introduce")
	private String introduce;
	
	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(
			name = "member_role",
			joinColumns = @JoinColumn(name = "member_id"),
			inverseJoinColumns = @JoinColumn(name = "role_id")
			)
	private Set<Role> roles = new HashSet<>();

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getPassword() {
		return null;
	}

	@Override
	public String getUsername() {
		return null;
	}

	
	
	@Override
	public boolean isAccountNonExpired() {
		return false;
	}

	@Override
	public boolean isAccountNonLocked() {
		return false;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return false;
	}

	@Override
	public boolean isEnabled() {
		return false;
	}
	
	
	
}
